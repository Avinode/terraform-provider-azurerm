package securitycenter

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/services/preview/security/mgmt/v3.0/security"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/clients"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/timeouts"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceServerVulnerabilityAssessment() *schema.Resource {
	return &schema.Resource{
		Create: resourceServerVulnerabilityAssessmentCreate,
		Read:   resourceServerVulnerabilityAssessmentRead,
		Delete: resourceServerVulnerabilityAssessmentDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"virtual_machine_id": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: azure.ValidateResourceID,
			},
		},
	}
}

func resourceServerVulnerabilityAssessmentCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	resourceGroup, name, _, err := parseVirtualMacineId(d.Get("virtual_machine_id").(string))
	if err != nil {
		return err
	}

	vulnerabilityAssessment, err := client.Get(ctx, resourceGroup, "Microsoft.Compute", "virtualMachines", name)
	if err != nil {
		if !utils.ResponseWasNotFound(vulnerabilityAssessment.Response) {
			return fmt.Errorf("checking for presence of existing Advanced Threat Protection for %q/%q: %+v", resourceGroup, name, err)
		}
	}

	if vulnerabilityAssessment.ID != nil && *vulnerabilityAssessment.ID != "" {
		return tf.ImportAsExistsError("azurerm_server_vulnerability_assessment", *vulnerabilityAssessment.ID)
	}

	vulnerabilityAssessment, err = client.CreateOrUpdate(ctx, resourceGroup, "Microsoft.Compute", "virtualMachines", name)
	if err != nil {
		return fmt.Errorf("create Server Vulnerability Assessment for %q/%q: %+v", resourceGroup, name, err)
	}

	if vulnerabilityAssessment.ID != nil {
		d.SetId(*vulnerabilityAssessment.ID)
	}

	// Take some time for resource to be visible after creating. Hence the retry logic
	readError := resourceServerVulnerabilityAssessmentRead(d, meta)
	for retry := 1; d.Id() == "" && retry < 11; retry++ {
		time.Sleep(time.Duration(retry) * time.Second)
		readError = resourceServerVulnerabilityAssessmentRead(d, meta)
	}
	return readError
}

func resourceServerVulnerabilityAssessmentRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	vmId := d.Get("virtual_machine_id").(string)
	var idToParse string
	if vmId != "" {
		idToParse = vmId
	} else {
		idToParse = d.Id()
	}
	resourceGroup, name, id, err := parseVirtualMacineId(idToParse)
	fmt.Printf("[DEBUG] Server Vulnerability Assessment %q %q err: %+v\n", vmId, d.Id(), err)
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, resourceGroup, "Microsoft.Compute", "virtualMachines", name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("Server Vulnerability Assessment was not found for %q/%q: %+v", resourceGroup, name, err)
			d.SetId("")
			return nil
		}

		return fmt.Errorf("retrieving Server Vulnerability Assessment status for %q/%q: %+v", resourceGroup, name, err)
	}

	d.SetId(*resp.ID)
	if vmId == "" {
		// Need to set virtual_machine_id when we do a import
		_ = d.Set("virtual_machine_id", "/subscriptions/"+id.SubscriptionID+
			"/resourceGroups/"+id.ResourceGroup+
			"/providers/Microsoft.Compute/virtualMachines/"+id.Path["virtualMachines"])
	}

	return nil
}

func resourceServerVulnerabilityAssessmentDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	resourceGroup, name, _, err := parseVirtualMacineId(d.Get("virtual_machine_id").(string))
	if err != nil {
		return err
	}

	// Can not delete if still in provisioning state. Wait for it to complete.
	for retry := 1; retry <= 20; retry++ {
		response, err := client.Get(ctx, resourceGroup, "Microsoft.Compute", "virtualMachines", name)
		if err != nil || response.ProvisioningState != security.ProvisioningState1Provisioning {
			break
		}
		time.Sleep(time.Duration(retry) * time.Second)
	}

	response, err := client.Delete(ctx, resourceGroup, "Microsoft.Compute", "virtualMachines", name)
	if err != nil {
		if utils.ResponseWasStatusCode(response, 202) {
			return nil
		} else {
			return fmt.Errorf("removing Server Vulnerability Assessment for %q/%q: %+v\n", resourceGroup, name, err)
		}
	} else {
		return nil
	}
}

func parseVirtualMacineId(stringId string) (string, string, *azure.ResourceID, error) {
	id, err := azure.ParseAzureResourceID(stringId)
	if err != nil {
		return "", "", nil, fmt.Errorf("server vulnerability assessment could not parse virtual_machine_id %q %+v", stringId, err)
	}
	resourceGroup := id.ResourceGroup
	name := id.Path["virtualMachines"]
	if name == "" {
		return "", "", nil, fmt.Errorf("server vulnerability assessment virtual_machine_id is missing name for virtualMachines %q", stringId)
	}
	return resourceGroup, name, id, nil
}
